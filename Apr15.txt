" 1. Rotate a matrix in place by Anti-Clockwise by n times
 
 If n = 1,
 
 1  2  3
 4  5  6
 7  8  9
 
 
 Output:
 3  6  9 
 2  5  8 
 1  4  7 
 
 
 
 If n = 2,
 
 1  2  3
 4  5  6
 7  8  9
 
 9 8 7 
 6 5 4 
 3 2 1

---->>package Apr15_2dArrayRotateHOmeWork;
import java.util.*;
public class rotateArrayAnticlockwise {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		int[][] arr = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 }, { 13, 14, 15, 16 } };

		int m = arr.length;
		int n = arr[0].length;
		
		int k=sc.nextInt();

  for(int i=0;i<k;i++) {
		System.out.println("Original Matrix");
		print(arr, m, n);
		transPosedMatrix(arr, m, n);
		System.out.println("Trasposed Matrix");
		print(arr, m, n);
		rotate90Anticlockwise(arr, m, n);
		System.out.println("AnticlockWise 90 rotate Matrix");
		print(arr, m, n);
  }

	}

	private static void print(int[][] arr, int m, int n) {
		// TODO Auto-generated method stub

		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++)
				System.out.print(arr[i][j] + " ");

			System.out.println();
		}

	}

	private static void rotate90Anticlockwise(int[][] arr, int m, int n) {
		// TODO Auto-generated method stub

		for (int i = 0; i < m / 2; i++) {
			for (int j = 0; j < n; j++) {
				int temp = arr[i][j];
				arr[i][j] = arr[n - 1 - i][j];
				arr[n - 1 - i][j] = temp;

			}
		}

	}

	private static void transPosedMatrix(int[][] arr, int m, int n) {
		// TODO Auto-generated method stub

		for (int i = 0; i < m; i++) {
			for (int j = i; j < n; j++) {
				int temp = arr[i][j];
				arr[i][j] = arr[j][i];
				arr[j][i] = temp;
			}
		}

	}

}

 
 
 2. Find the number of rows which is sorted in increasing order in a given matrix
 
int a[][] = { { 1, 2, 3, 4 }, { 4, 6, 7, 1 }, { 2, 3, 7, 9 }, { 7, 12, 15, 7 } };

Count : 2

Explaination -> row 0 and row 2 are sorted in increasing order"